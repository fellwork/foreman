/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",

  /**
   * (Required) This specifies the version of the Rush engine to be used in this repo.
   * Rush's "version selector" feature ensures that the globally installed tool will
   * behave like this release, regardless of which version is installed globally.
   *
   * The common/scripts/install-run-rush.js automation script also uses this version.
   *
   * NOTE: If you upgrade to a new major version of Rush, you should replace the "v5"
   * path segment in the "$schema" field for all your Rush config files.  This will ensure
   * correct error-underlining and tab-completion for editors such as VS Code.
   */
  "rushVersion": "5.63.1",

  /**
   * The next field selects which package manager should be installed and determines its version.
   * Rush installs its own local copy of the package manager to ensure that your build process
   * is fully isolated from whatever tools are present in the local environment.
   *
   * Specify one of: "pnpmVersion", "npmVersion", or "yarnVersion".  See the Rush documentation
   * for details about these alternatives.
   */
  "pnpmVersion": "6.32.4",

  /**
   * Options that are only used when the PNPM package manager is selected
   */
  "pnpmOptions": {
    "strictPeerDependencies": true,
    // "resolutionStrategy": "fast",
    "preventManualShrinkwrapChanges": true,
    "useWorkspaces": true
  },

  "nodeSupportedVersionRange": ">=12.13.0 <13.0.0 || >=14.15.0 <15.0.0 || >=16.13.0 <17.0.0",

  /**
   * If you would like the version specifiers for your dependencies to be consistent, then
   * uncomment this line. This is effectively similar to running "rush check" before any
   * of the following commands:
   *
   *   rush install, rush update, rush link, rush version, rush publish
   *
   * In some cases you may want this turned on, but need to allow certain packages to use a different
   * version. In those cases, you will need to add an entry to the "allowedAlternativeVersions"
   * section of the common-versions.json.
   */
  "ensureConsistentVersions": true,

  /**
   * Large monorepos can become intimidating for newcomers if project folder paths don't follow
   * a consistent and recognizable pattern.  When the system allows nested folder trees,
   * we've found that teams will often use subfolders to create islands that isolate
   * their work from others ("shipping the org").  This hinders collaboration and code sharing.
   *
   * The Rush developers recommend a "category folder" model, where buildable project folders
   * must always be exactly two levels below the repo root.  The parent folder acts as the category.
   * This provides a basic facility for grouping related projects (e.g. "apps", "libraries",
   * "tools", "prototypes") while still encouraging teams to organize their projects into
   * a unified taxonomy.  Limiting to 2 levels seems very restrictive at first, but if you have
   * 20 categories and 20 projects in each category, this scheme can easily accommodate hundreds
   * of projects.  In practice, you will find that the folder hierarchy needs to be rebalanced
   * occasionally, but if that's painful, it's a warning sign that your development style may
   * discourage refactoring.  Reorganizing the categories should be an enlightening discussion
   * that brings people together, and maybe also identifies poor coding practices (e.g. file
   * references that reach into other project's folders without using Node.js module resolution).
   *
   * The defaults are projectFolderMinDepth=1 and projectFolderMaxDepth=2.
   *
   * To remove these restrictions, you could set projectFolderMinDepth=1
   * and set projectFolderMaxDepth to a large number.
   */
  "projectFolderMinDepth": 2,
  "projectFolderMaxDepth": 2,

  /**
   * This feature helps you to review and approve new packages before they are introduced
   * to your monorepo.  For example, you may be concerned about licensing, code quality,
   * performance, or simply accumulating too many libraries with overlapping functionality.
   * The approvals are tracked in two config files "browser-approved-packages.json"
   * and "nonbrowser-approved-packages.json".  See the Rush documentation for details.
   */
  "approvedPackagesPolicy": {
    "reviewCategories": ["conventions", "libraries", "tests"],
    "ignoredNpmScopes": ["@types", "@babel"]
  },

  /**
   * If you use Git as your version control system, this section has some additional
   * optional features you can use.
   */
  "gitPolicy": {
    "allowedEmailRegExps": ["[^@]+@users\\.noreply\\.github\\.com"],
    "sampleEmail": "example@users.noreply.github.com"
  },

  "repository": {
    "url": "https://github.com/fellwork/foreman.git",
    "defaultBranch": "main",
    "defaultRemote": "origin"
  },

  /**
   * Event hooks are customized script actions that Rush executes when specific events occur
   */
  "eventHooks": {
    "preRushInstall": [
      // "common/scripts/pre-rush-install.js"
    ],
    "postRushInstall": [],
    "preRushBuild": [],
    "postRushBuild": []
  },

  "projects": [
    // conventions
    {
      "packageName": "@fellwork/esbuild-plugin-foreman",
      "projectFolder": "conventions/esbuild-plugin",
      "reviewCategory": "conventions",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/eslint-config-foreman",
      "projectFolder": "conventions/eslint-config",
      "reviewCategory": "conventions",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/eslint-plugin-foreman",
      "projectFolder": "conventions/eslint-plugin",
      "reviewCategory": "conventions",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/prettier-config-foreman",
      "projectFolder": "conventions/prettier-config",
      "reviewCategory": "conventions",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-rollup-config",
      "projectFolder": "conventions/rollup-config",
      "reviewCategory": "conventions",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-typescript",
      "projectFolder": "conventions/typescript",
      "reviewCategory": "conventions",
      "shouldPublish": true
    },
    // libraries
    {
      "packageName": "@fellwork/foreman-build",
      "projectFolder": "libraries/build",
      "reviewCategory": "libraries",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-cli",
      "projectFolder": "libraries/cli",
      "reviewCategory": "libraries",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-config",
      "projectFolder": "libraries/config",
      "reviewCategory": "libraries",
      "shouldPublish": true
    },

    {
      "packageName": "@fellwork/foreman",
      "projectFolder": "libraries/foreman",
      "reviewCategory": "libraries",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-loader",
      "projectFolder": "libraries/loader",
      "reviewCategory": "libraries",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-log",
      "projectFolder": "libraries/log",
      "reviewCategory": "libraries",
      "shouldPublish": true
    },
    {
      "packageName": "@fellwork/foreman-tsc",
      "projectFolder": "libraries/tsc",
      "reviewCategory": "libraries",
      "shouldPublish": true
    }
  ]
}
